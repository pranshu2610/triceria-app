{"version":3,"sources":["component/analyser/analyser.component.jsx","component/formBox/formBox.component.jsx","component/button/button.component.jsx","component/tag/tag.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Analyser","answer","guess","guessInt","parseInt","Math","abs","FormBox","handleChange","label","otherProps","className","onChange","value","length","Button","children","Tag","response","App","generateNum","level","num","floor","random","setState","state","handleSubmit","bind","nextLevel","levelVal","this","name","type","e","target","required","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8UAYeA,EAVE,SAACC,EAAQC,GACtB,IAAIC,EAAWC,SAASF,EAAO,IAC/B,OAAOD,IAASE,EAAW,UAEtBE,KAAKC,IAAIL,EAAOE,IAAW,EAAK,MAE7BE,KAAKC,IAAIL,EAAOE,IAAW,GAAK,OAC1B,Q,OCUHI,G,MAfC,SAAC,GAAD,IAAGC,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,MAAUC,EAA3B,+CACZ,yBAAKC,UAAU,SACX,yCAAOA,UAAU,aAAaC,SAAUJ,GAAkBE,IAEtDD,EACC,2BAAOE,UAAS,UACbD,EAAWG,MAAMC,OAAS,SAAW,GADxB,sBAIZL,GAED,QCFDM,G,MATA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAaN,EAAhB,mCACX,0CACIC,UAAU,iBACND,GAEHM,KCMMC,G,MAZH,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACR,yBAAKP,UAAU,WACX,uBAAGA,UACY,YAAXO,EAAuB,UACV,QAAXA,EAAmB,MACR,SAAXA,EAAoB,OACT,SAAXA,EAAoB,OACpB,MACDA,MC2DEC,G,wDA9Db,aAAe,IAAD,8BACZ,gBAWFC,YAAc,YAAsB,IAApBnB,EAAmB,EAAnBA,OAAQoB,EAAW,EAAXA,MACtB,GAAa,IAATpB,EAAY,CACZ,IAAIqB,EAAMjB,KAAKkB,MAAMlB,KAAKmB,SAAWH,EAAQ,IAAK,GAClD,EAAKI,SAAS,CACZxB,OAAQqB,MAdd,EAAKI,MAAQ,CACXL,MAAO,EACPpB,OAAQ,EACRC,MAAO,GACPgB,SAAU,IAEZ,EAAKS,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBATL,E,wDAqBZ,IAAIE,EAAWC,KAAKL,MAAML,MAAQ,EAClCU,KAAKN,SAAS,CACZJ,MAAOS,EACP5B,MAAO,GACPD,OAAQ,M,qCAIV8B,KAAKN,SAAS,CACZP,SAAUlB,EAAS+B,KAAKL,MAAMzB,OAAQ8B,KAAKL,MAAMxB,SAEhD6B,KAAKL,MAAMzB,SAAWG,SAAS2B,KAAKL,MAAMxB,MAAM,KAAM6B,KAAKF,c,+BAGtD,IAAD,SACgCE,KAAKL,MAAvCzB,EADE,EACFA,OAAQoB,EADN,EACMA,MAAOnB,EADb,EACaA,MAAOgB,EADpB,EACoBA,SAG3B,OADAa,KAAKX,YAAY,CAACnB,SAAQoB,UAExB,yBAAKV,UAAU,QACf,yBAAKA,UAAU,aACb,wBAAIA,UAAU,SAAd,yBACA,wBAAIA,UAAU,SAAd,gBAAgCU,IAChC,kBAAC,EAAD,CACEW,KAAK,OACLC,KAAK,OACLzB,aAAc,SAAA0B,GAAC,OAAG,EAAKT,SAAS,CAACvB,MAAOgC,EAAEC,OAAOtB,SACjDA,MAAOX,EACPO,MAAK,iCAAmC,IAANY,GAClCe,UAAQ,IAEV,kBAAC,EAAD,CAAQC,QAASN,KAAKJ,cAAtB,UACA,yBAAKhB,UAAU,gBACb,kBAAC,EAAD,CAAKO,SAAUA,W,GAvDPoB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e083dc18.chunk.js","sourcesContent":["//import React from 'react';\r\n\r\nconst Analyser = (answer, guess) => {\r\n    var guessInt = parseInt(guess, 10);\r\n    return(answer===guessInt ? \"Correct\"\r\n        : \r\n        (Math.abs(answer-guessInt)<=4) ? \"Hot\"\r\n            : \r\n            Math.abs(answer-guessInt)<=15 ? \"Warm\"\r\n                : \"Cold\"\r\n    );\r\n}\r\nexport default Analyser;","import React from 'react';\r\n\r\nimport './formBox.styles.scss';\r\n\r\nconst FormBox = ({ handleChange, label, ...otherProps}) => (\r\n    <div className=\"group\">\r\n        <input className=\"form-input\" onChange={handleChange} {...otherProps} />\r\n        {\r\n            label ? \r\n            (<label className={`${\r\n                otherProps.value.length ? 'shrink' : ''\r\n                } form-input-label`}\r\n                >\r\n                {label}      \r\n            </label>\r\n            ) : null}\r\n    </div>\r\n);\r\n\r\nexport default FormBox","import React from 'react';\r\n\r\nimport './button.styles.scss';\r\n\r\nconst Button = ({ children, ...otherProps}) => (\r\n    <button \r\n        className='custom-button'\r\n        {...otherProps}\r\n    >\r\n        {children}\r\n    </button>\r\n);\r\n\r\nexport default Button;","import React from 'react';\r\nimport './tag.styles.scss';\r\n\r\nconst Tag = ({response}) => (\r\n    <div className='tag-box'>\r\n        <p className={\r\n            response===\"Correct\" ? \"correct\" \r\n            : response===\"Hot\" ? \"hot\" \r\n            : response===\"Warm\" ? \"warm\" \r\n            : response===\"Cold\" ? \"cold\" \r\n            : null}>\r\n            {response}\r\n        </p>\r\n    </div>\r\n)\r\nexport default Tag;","import React, { Component } from 'react';\nimport Analyser from './component/analyser/analyser.component';\nimport FormBox from './component/formBox/formBox.component';\nimport Button from './component/button/button.component';\nimport Tag from './component/tag/tag.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      level: 1,\n      answer: 0,\n      guess: '',\n      response: ''\n    }\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.nextLevel = this.nextLevel.bind(this);\n  }\n\n  generateNum = ({answer, level}) => {\n    if (answer===0) {\n        var num = Math.floor(Math.random() * level * 100 +1);\n        this.setState({\n          answer: num\n        })\n    }\n  }\n  nextLevel() {\n    var levelVal = this.state.level + 1;\n    this.setState({\n      level: levelVal,\n      guess: '',\n      answer: 0\n     })\n  }\n  handleSubmit() {\n    this.setState({\n      response: Analyser(this.state.answer, this.state.guess)\n    })\n    if(this.state.answer === parseInt(this.state.guess,10)) {this.nextLevel() }\n  }\n\n  render() {\n    var {answer, level, guess, response} = this.state;\n    //console.log(answer, level, guess, response);\n    this.generateNum({answer, level});\n    return(\n      <div className=\"main\">\n      <div className=\"main-body\">\n        <h1 className=\"title\">Guess the Number Game</h1>\n        <h2 className=\"level\">{`Level ${level}`}</h2>\n        <FormBox\n          name='text'\n          type='text'\n          handleChange={e=> this.setState({guess: e.target.value})}\n          value={guess}\n          label={`Enter number from 0 to ${ level*100 }`}\n          required\n        />\n        <Button onClick={this.handleSubmit}>Submit</Button>\n        <div className=\"response-box\">\n          <Tag response={response}/>\n        </div>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}